#!/usr/local/node/bin/node

const { info, error } = require("../tools/colors");
const fs = require("fs");
const execSync = require("child_process").execSync;
const yaml = require("js-yaml");


/**
 *  @readme
 *      GitHookProduct: 自动化部署项目的自动化部署处理方案
 *      PostReceive: hook: post-receive 
 * 
 *      git_hooks_env: 给git-hooks的环境变量    
 * 
 */

const git_hooks_env = "PATH=/usr/local/node/bin:/usr/bin:/usr/local/bin && bash -c";

class GitHookProduct {

    constructor (){

        // git-hooks 项目路径
        this.hooks_dirname = "/home/git/product/git-hooks";

    }

    run (){

        // console.log(execSync("export PATH=/usr/local/node/bin:/usr/bin:/usr/local/bin && bash -c 'npm -v'").toString());

        info("[info] 进入目录 %s", this.hooks_dirname);
        process.chdir(this.hooks_dirname);
        
        info("[info] 拉取更新");
        execSync("sudo git pull");


        try {

            const deploy_pathname = "deploy.yaml";

            info("[info] 检查 %s 是否存在", deploy_pathname);
            fs.accessSync(deploy_pathname);
            const f = fs.readFileSync(deploy_pathname);
            const task = yaml.safeLoad(f);

            if (task.run.length){
                for (let cmd of task.run){
                    console.log(execSync(`export ${git_hooks_env} '${cmd}'`).toString());
                }
            }

            info("[info] end...");

        } catch (err){
            info("[info] %s 不存在, 结束...", deploy_pathname);
        }
    }

}

class PostReceive {

    constructor (branchs){
        this.warehourse = null;
        this.branchs = branchs;
    }

    // 获取仓库名称
    __getWarehourseName (){
        let aPath = __filename.split("/");
        let index = aPath.findIndex( v => v === "hooks" );
        this.warehourse = aPath[index - 1];
    }

    run (){

        this.__getWarehourseName();
        info("[info] push仓库名: %s, 需要更新的分支: %s", this.warehourse, this.branchs.join(" , "));

        if (this.warehourse === "git-hooks") return new GitHookProduct().run();

    }

}

{
    if ( !module.parents ){

        (async () => {
            
            // 获取push的分支, 可以一次push多个分支
            process.stdin.setEncoding('utf8');
            const branchs = await new Promise(resolve => {
                const chunks = [];
                process.stdin.on('readable', () => {
                    const chunk = process.stdin.read();
                    if (chunk !== null) {
                        chunks.push(chunk);
                    }
                });
    
                process.stdin.on('end', () => {
                    const arr = chunks.join("").trim().split(" ");
                    const branchs = arr.splice(2);
                    resolve(branchs);
                });
            });


            // 处理 post-receive
            try {
                new PostReceive(branchs).run();
            } catch (err){
                error("[error] 发生了错误", err.toString());
            }
            
        })();
    }
}



